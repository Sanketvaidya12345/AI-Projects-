# üì¶ Install required packages
!pip install -q gradio transformers accelerate
!pip install -q transformers accelerate bitsandbytes gradio
!pip install -q transformers accelerate einops gradio


from transformers import pipeline
import gradio as gr

# Load Falcon-7B Instruct Model
generator = pipeline(
    "text-generation",
    model="tiiuae/falcon-7b-instruct",
    trust_remote_code=True,
    device_map="auto",
    torch_dtype="auto"
)

# Define text generation function
def generate_article(topic):
    if not topic.strip():
        return "‚ö†Ô∏è Please enter a valid topic."
    
    prompt = f"Write a detailed and factually accurate 300-word article about {topic}."
    
    response = generator(
        prompt,
        max_new_tokens=600,
        do_sample=True,
        temperature=0.7,
        top_k=50,
        top_p=0.95,
        repetition_penalty=1.1,
        eos_token_id=11  # optional end-of-sequence token
    )

    generated_text = response[0]['generated_text']
    
    # Remove the prompt from the output (optional cleanup)
    return generated_text.replace(prompt, "").strip()

# Set up the Gradio UI
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("""
    # üß† AI Article Generator
    Enter any topic below and get a 300-word informative article generated by Falcon-7B!
    """)
    
    with gr.Row():
        with gr.Column():
            topic_input = gr.Textbox(label="üîç Enter Topic", placeholder="e.g., Potassium Permanganate")
            generate_btn = gr.Button("‚ö° Generate Article")
        
        with gr.Column():
            output_box = gr.Textbox(label="üìÑ AI-Generated Article", lines=25)

    generate_btn.click(fn=generate_article, inputs=topic_input, outputs=output_box)

# Launch the app
demo.launch()
