!pip install -q gradio pydub SpeechRecognition matplotlib
import gradio as gr
import speech_recognition as sr
from pydub import AudioSegment
import math
import matplotlib.pyplot as plt
import numpy as np
import tempfile
import os

# Function to plot waveform of audio
def plot_waveform(audio_path):
    sound = AudioSegment.from_file(audio_path)
    samples = np.array(sound.get_array_of_samples())
    plt.figure(figsize=(10, 3))
    plt.plot(samples)
    plt.title("üîä Audio Waveform")
    plt.xlabel("Samples")
    plt.ylabel("Amplitude")
    plt.tight_layout()

    plot_path = tempfile.NamedTemporaryFile(suffix=".png", delete=False).name
    plt.savefig(plot_path)
    plt.close()
    return plot_path

# Core transcription function
def transcribe_audio(audio_file):
    recognizer = sr.Recognizer()
    audio = AudioSegment.from_file(audio_file)
    audio = audio.set_channels(1).set_frame_rate(16000)

    # Save as converted WAV
    converted_path = "converted.wav"
    audio.export(converted_path, format="wav")

    chunk_length_ms = 30 * 1000
    chunks = math.ceil(len(audio) / chunk_length_ms)
    transcript = ""

    for i in range(chunks):
        start = i * chunk_length_ms
        end = start + chunk_length_ms
        chunk = audio[start:end]
        chunk_file = f"chunk_{i}.wav"
        chunk.export(chunk_file, format="wav")

        with sr.AudioFile(chunk_file) as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data)
                transcript += " " + text
            except sr.UnknownValueError:
                transcript += " [Unrecognized Speech] "
            except sr.RequestError as e:
                transcript += f" [Error: {e}] "

        os.remove(chunk_file)  # Clean up

    waveform_img = plot_waveform(audio_file)
    return transcript.strip(), waveform_img

# Gradio UI
with gr.Blocks(theme=gr.themes.Soft()) as app:
    gr.Markdown("""
    # üéôÔ∏è Audio-to-Text Transcription App
    Upload an audio file (MP3/WAV) and this tool will convert speech to text with chunk-wise processing. View the waveform and transcript below.
    """)

    with gr.Row():
        with gr.Column():
            audio_input = gr.Audio(label="üì§ Upload Audio File", type="filepath")
            transcribe_btn = gr.Button("üß† Transcribe Audio")
        
        with gr.Column():
            image_output = gr.Image(label="üìä Audio Waveform")
            transcript_output = gr.Textbox(label="üìù Full Transcript", lines=15)

    transcribe_btn.click(fn=transcribe_audio, inputs=audio_input, outputs=[transcript_output, image_output])

# Launch app
app.launch()


